{{define "encodeMap"}}
    func (x {{ CamelCase .FullName }}Map) Encode (p *packet.Packet) {
        if x == nil {
            packet.Encoder(p).Nil()
        } else {
            {{ $keyKind := GetKind .MapKey.Kind -}}
            {{ $valKind := GetKind .MapValue.Kind -}}
            packet.Encoder(p).Map(uint32(len(x)), {{$keyKind}}, {{$valKind}})
            for k, v := range x {
                {{ $keyEncoder := GetLUTEncoder .MapKey.Kind -}}
                {{ if and (eq $keyEncoder "") (eq .MapKey.Kind 11) -}} {{/* protoreflect.MessageKind */ -}}
                    k.Encode(p)
                {{else -}}
                    {{ if eq .MapKey.Kind 14 -}}  {{/* protoreflect.EnumKind */ -}}
                        packet.Encoder(p) {{$keyEncoder}} (uint32(k))
                    {{else -}}
                        packet.Encoder(p) {{$keyEncoder}} (k)
                    {{end -}}
                {{end -}}
                {{ $valEncoder := GetLUTEncoder .MapValue.Kind -}}
                {{ if and (eq $valEncoder "") (eq .MapValue.Kind 11) -}} {{/* protoreflect.MessageKind */ -}}
                    v.Encode(p)
                {{else -}}
                    {{ if eq .MapValue.Kind 14 -}} {{/* protoreflect.EnumKind */ -}}
                        packet.Encoder(p) {{$valEncoder}} (uint32(v))
                    {{else -}}
                        packet.Encoder(p) {{$valEncoder}} (v)
                    {{end -}}
                {{end -}}
            }
        }
    }
{{end}}
