{{define "server"}}
type Server struct {
    *frisbee.Server
}
    func NewServer({{ GetServerFields .services }}, tlsConfig *tls.Config, logger *zerolog.Logger) (*Server, error) {
        table := make(frisbee.HandlerTable)
        {{template "serverhandlers" .services -}}
        var s *frisbee.Server
        var err error
        if tlsConfig != nil {
            s, err = frisbee.NewServer(table, frisbee.WithTLS(tlsConfig), frisbee.WithLogger(logger))
            if err != nil {
                return nil, err
            }
        } else {
            s, err = frisbee.NewServer(table, frisbee.WithLogger(logger))
            if err != nil {
                return nil, err
            }
        }
        return &Server{
            Server: s,
        }, nil
    }
{{end}}

{{define "serverhandlers"}}
    {{ $counter := Counter 9 -}}
    {{ range $i, $v := (MakeIterable .Len) -}}
        {{ $service := $.Get $i -}}
        {{ range $i, $v := (MakeIterable $service.Methods.Len) -}}
            {{ $method := $service.Methods.Get $i -}}
            {{ $count := call $counter -}}
            table[{{ $count }}] = func(ctx context.Context, incoming *packet.Packet) (outgoing *packet.Packet, action frisbee.Action) {
                req := New{{ CamelCase $method.Input.FullName  }}()
                err := req.Decode(incoming.Content.B)
                if err == nil {
                    if req.ignore {
                        {{ FirstLowerCaseName $service.Name }}.{{ CamelCaseName $method.Name }}(ctx, req)
                    } else {
                        var res *{{ CamelCase $method.Output.FullName }}
                        outgoing = incoming
                        outgoing.Content.Reset()
                        res, err = {{ FirstLowerCase (CamelCaseName $service.Name) }}.{{ CamelCaseName $method.Name }}(ctx, req)
                        if err != nil {
                            res.Error(outgoing, err)
                        } else {
                            res.Encode(outgoing)
                        }
                        outgoing.Metadata.ContentLength = uint32(len(outgoing.Content.B))
                    }
                }
                return
            }
        {{end -}}
    {{end -}}
{{end}}