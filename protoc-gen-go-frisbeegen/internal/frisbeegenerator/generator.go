package frisbeegenerator

import (
	"fmt"
	"google.golang.org/protobuf/compiler/protogen"
	"protoc-gen-go-frisbeegen/internal/utils"
	"strings"
)

var dex = 0

type generator struct {
	gen         *protogen.Plugin
	file        *protogen.File
	genFile     *protogen.GeneratedFile
	methodNames map[string]int
}

func New(gen *protogen.Plugin, file *protogen.File) *generator {
	filename := file.GeneratedFilenamePrefix + "_frisbee.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)

	return &generator{
		gen:         gen,
		file:        file,
		genFile:     g,
		methodNames: make(map[string]int),
	}
}

func (g *generator) GenerateFrisbeeFiles() {

	g.genDoNotEdit()
	g.genNeededImports()
	g.genServices()
	g.genMethodConsts()
}

func (g *generator) genDoNotEdit() {
	g.genFile.P("// Code generated by frisbeegenerator. DO NOT EDIT.")
	g.genFile.P()
	g.genFile.P("package ", g.file.GoPackageName)
	g.genFile.P()
}

func (g *generator) genNeededImports() {
	g.genFile.P("import (")
	g.genFile.P("	\"github.com/loophole-labs/frisbee\"")
	g.genFile.P(")")
}

func (g *generator) genServices() {
	for _, service := range g.file.Services {
		g.genService(service)
	}
}

func (g *generator) genService(service *protogen.Service) {
	serviceName := utils.CamelCase(service.GoName)
	g.genFile.P("type ", serviceName, "Router interface {")
	for _, method := range service.Methods {
		g.genFile.P(getFuncSignature(method))
	}
	g.genFile.P("}")
}

func getFuncSignature(method *protogen.Method) string {
	methName := utils.CamelCase(method.GoName)
	return fmt.Sprintf("Handle%s(incomingMessage frisbee.Message, incomingContent []byte) (outgoingMessage *frisbee.Message, outgoingContent []byte, action frisbee.Action)", methName)
}

func (g *generator) registerMethodName(method string) {
	g.methodNames[method] = dex
	dex += 1
}

func (g *generator) genMethodConsts() {
	for _, service := range g.file.Services {
		for _, method := range service.Methods {
			g.registerMethodName(utils.CamelCase(method.GoName))
		}
	}
	kvs := make([]string, len(g.methodNames))
	for methodString, index := range g.methodNames {
		kvs[index] = fmt.Sprintf("\"%s\":%d", methodString, index+1)
	}

	g.genFile.P(fmt.Sprintf("var MessageTypes = map[string]uint16{%s}", strings.Join(kvs, ",")))
}
