package frisbeegenerator

import (
	"fmt"
	"github.com/loophole-labs/frisbee/internal/utils"
	//"github.com/loophole-labs/frisbee"
	"google.golang.org/protobuf/compiler/protogen"
	"strings"
)

var dex = 0

type generator struct {
	gen         *protogen.Plugin
	file        *protogen.File
	genFile     *protogen.GeneratedFile
	methodNames map[string]int
}

func New(gen *protogen.Plugin, file *protogen.File) *generator {
	filename := file.GeneratedFilenamePrefix + "_frisbee.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)

	return &generator{
		gen:         gen,
		file:        file,
		genFile:     g,
		methodNames: make(map[string]int),
	}
}

func (g *generator) GenerateFrisbeeFiles() {
	g.genDoNotEdit()
	g.genNeededImports()
	g.genClientInterfaces()
	g.genServerInterfaces()
	g.genMethodConsts()
	g.genClientRouterFuncs()
	g.genServerRouterFuncs()
	g.genNewClientContructors()
	g.genNewServerContructors()
}

func (g *generator) p(v ...interface{}) {
	g.genFile.P(v...)
}

func (g *generator) genDoNotEdit() {
	g.p("// Code generated by frisbeegen. DO NOT EDIT.")
	g.p()
	g.p("package ", g.file.GoPackageName)
	g.p()
}

func (g *generator) genNeededImports() {
	g.p("import (")
	g.p("	\"github.com/loophole-labs/frisbee\"")
	g.p(")")
}

func (g *generator) genClientInterfaces() {
	for _, service := range g.file.Services {
		g.genClientInterface(service)
	}
}

func (g *generator) genClientInterface(service *protogen.Service) {
	serviceName := utils.CamelCase(service.GoName)
	g.p("type ", serviceName, "ClientHandler interface {")
	for _, method := range service.Methods {
		g.p(getClientFuncSignature(method))
	}
	g.p("}")
}

func (g *generator) genServerInterfaces() {
	for _, service := range g.file.Services {
		g.genServerInterface(service)
	}
}

func (g *generator) genServerInterface(service *protogen.Service) {
	serviceName := utils.CamelCase(service.GoName)
	g.p("type ", serviceName, "ServerHandler interface {")
	for _, method := range service.Methods {
		g.p(getServerFuncSignature(method))
	}
	g.p("}")
}

func getClientFuncSignature(method *protogen.Method) string {
	methName := utils.CamelCase(method.GoName)
	return fmt.Sprintf("Handle%s(incomingMessage frisbee.Message, incomingContent []byte) (outgoingMessage *frisbee.Message, outgoingContent []byte, action frisbee.Action)", methName)
}

func getServerFuncSignature(method *protogen.Method) string {
	methName := utils.CamelCase(method.GoName)
	return fmt.Sprintf("Handle%s(c *frisbee.Conn, incomingMessage frisbee.Message, incomingContent []byte) (outgoingMessage *frisbee.Message, outgoingContent []byte, action frisbee.Action)", methName)
}

func (g *generator) registerMethodName(method string) {
	g.methodNames[method] = dex
	dex += 1
}

func (g *generator) genMethodConsts() {
	for _, service := range g.file.Services {
		for _, method := range service.Methods {
			g.registerMethodName(utils.CamelCase(method.GoName))
		}
	}
	kvs := make([]string, len(g.methodNames))
	for methodString, index := range g.methodNames {
		kvs[index] = fmt.Sprintf("\"%s\":%d", methodString, index+1)
	}

	g.p(fmt.Sprintf("var messageTypes = map[string]uint32{ %s }", strings.Join(kvs, ",")))
}

func (g *generator) genClientRouterFuncs() {
	for _, service := range g.file.Services {
		g.genClientRouterFunc(service)
	}
}

func (g *generator) genClientRouterFunc(service *protogen.Service) {
	serviceName := utils.CamelCase(service.GoName)

	g.p("func init", serviceName, "ClientRouter( h ", serviceName, "ClientHandler )frisbee.ClientRouter {")
	g.p("router := make(frisbee.ClientRouter)")
	for _, method := range service.Methods {
		g.p("router[messageTypes[\"", utils.CamelCase(method.GoName), "\"]] = h.Handle", utils.CamelCase(method.GoName))
	}
	g.p("return router")
	g.p("}")
}

func (g *generator) genServerRouterFuncs() {
	for _, service := range g.file.Services {
		g.genServerRouterFunc(service)
	}
}

func (g *generator) genServerRouterFunc(service *protogen.Service) {
	serviceName := utils.CamelCase(service.GoName)

	g.p("func init", serviceName, "ServerRouter( h ", serviceName, "ServerHandler )frisbee.ServerRouter {")
	g.p("router := make(frisbee.ServerRouter)")
	for _, method := range service.Methods {
		g.p("router[messageTypes[\"", utils.CamelCase(method.GoName), "\"]] = h.Handle", utils.CamelCase(method.GoName))
	}
	g.p("return router")
	g.p("}")
}

func (g *generator) genNewClientContructors() {
	for _, service := range g.file.Services {
		g.genNewClientContructor(service)
	}
}

func (g *generator) genNewClientContructor(service *protogen.Service) {
	serviceName := utils.CamelCase(service.GoName)
	g.p("func New", utils.CamelCase(service.GoName), "Client(addr string, h ", serviceName, "ClientHandler, opts ...frisbee.Option) *frisbee.Client {")
	g.p("return frisbee.NewClient(addr, init", serviceName, "ClientRouter(h), opts...)")
	g.p("}")
}

func (g *generator) genNewServerContructors() {
	for _, service := range g.file.Services {
		g.genNewServerContructor(service)
	}
}

func (g *generator) genNewServerContructor(service *protogen.Service) {
	serviceName := utils.CamelCase(service.GoName)
	g.p("func New", utils.CamelCase(service.GoName), "Server(addr string, h ", serviceName, "ServerHandler, opts ...frisbee.Option) *frisbee.Server {")
	g.p("return frisbee.NewServer(addr, init", serviceName, "ServerRouter(h), opts...)")
	g.p("}")
}
